<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title id="page-title" @text="$data.metadata.title"></title>
    <meta name="description" content="" id="page-description">

    <!-- 全局 CSS 变量 -->
    <link rel="stylesheet" href="/css/variables.css" webc:keep>

    <!-- inline bundles -->
    <style @raw="getBundle('css')" webc:keep></style>
    <script @raw="getBundle('js')" webc:keep></script>

    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined&icon_names=commit&display=block"
        rel="stylesheet" webc:keep />

    <!-- Favicon -->
    <!-- <link rel="icon" type="image/x-icon" href="/favicon.ico"> -->
</head>

<body>
    <sidebar-nav></sidebar-nav>
    <div class="main-content-area">
        <site-header></site-header>
        <main>
            <slot>Main</slot>
        </main>
        <site-footer></site-footer>
    </div>
    <script @raw="getBundle('js', 'defer')" webc:keep></script>
</body>

</html>

<!-- 防止深色模式闪烁 -->
<script webc:bucket="defer">
    (function () {
        const savedTheme = localStorage.getItem('theme');
        if (savedTheme === 'dark' || (!savedTheme && window.matchMedia('(prefers-color-scheme: dark)').matches)) {
            document.body.classList.add('dark');
        }
    })();

    // 统一的主题切换功能 - 支持所有主题切换按钮
    document.addEventListener('DOMContentLoaded', function () {
        // 主题切换处理函数
        function toggleTheme() {
            document.body.classList.toggle('dark');
            const isDark = document.body.classList.contains('dark');
            localStorage.setItem('theme', isDark ? 'dark' : 'light');
        }

        // 为所有主题切换按钮添加事件监听
        const themeToggleButtons = document.querySelectorAll('.theme-toggle, .desktop-theme-toggle');
        themeToggleButtons.forEach(button => {
            button.addEventListener('click', toggleTheme);
        });

        // 客户端时区转换功能
        function formatLocalTime() {
            const timeElements = document.querySelectorAll('.local-time[data-utc]');

            timeElements.forEach(element => {
                const utcTime = element.getAttribute('data-utc');
                if (utcTime) {
                    try {
                        const date = new Date(utcTime);
                        if (!isNaN(date.getTime())) {
                            // 格式化为本地时间 - 精确到秒
                            const options = {
                                year: 'numeric',
                                month: 'long',
                                day: 'numeric',
                                hour: '2-digit',
                                minute: '2-digit',
                                second: '2-digit',
                                timeZoneName: 'short'
                            };
                            const localizedDate = date.toLocaleString(undefined, options);
                            element.textContent = localizedDate;
                        } else {
                            element.textContent = 'Invalid date';
                        }
                    } catch (error) {
                        console.warn('Error formatting date:', error);
                        element.textContent = 'Date error';
                    }
                }
            });
        }

        // 运行时区转换
        formatLocalTime();
    });
</script>

<style>
    /* Reset and base styles */
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    html {
        scrollbar-gutter: stable both-edges;
        font-size: 16px;
    }

    body {
        font-family: var(--font-family-sans);
        font-weight: 400;
        line-height: 1.6;
        color: var(--color-text-primary);
        background-color: var(--color-bg-primary);
        overflow-y: auto;
        min-height: 100vh;
        display: flex;
        max-width: var(--body-max-width);
        margin: 0 auto;
    }

    .main-content-area {
        flex: 1;
        display: flex;
        flex-direction: column;
        min-height: 100vh;
        padding: 0 var(--spacing-xl);
    }

    /* 响应式布局 */
    @media (max-width: 1200px) {
        body {
            flex-direction: column;
            padding: 0px var(--spacing-md);
        }
    }

    /* Main content */
    main {
        padding-top: var(--spacing-xl);
        min-height: 400px;
        flex: 1;
        box-sizing: border-box;
        width: 100%;
    }



    .material-symbols-outlined {
        vertical-align: middle;
    }
</style>